name: SonarQube

on:
  workflow_dispatch:          # ▶️ habilita botón "Run workflow"
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # <- secret en Settings > Secrets > Actions

    steps:
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Set up JDK 17 (required by Sonar)
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install dotnet-sonarscanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path $env:RUNNER_TEMP\scanner -ItemType Directory -Force | Out-Null
          dotnet tool update dotnet-sonarscanner --tool-path $env:RUNNER_TEMP\scanner

      - name: Begin Sonar analysis
        shell: pwsh
        run: |
          $scanner = "$env:RUNNER_TEMP\scanner\dotnet-sonarscanner"
          & $scanner begin `
            /k:"Fabz2004_IG-Software-III-Final" `
            /o:"fabz2004" `
            /d:sonar.sources="." `
            /d:sonar.exclusions="**/bin/**,**/obj/**" `
            /d:sonar.token="$env:SONAR_TOKEN"

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      # (Opcional) Cobertura con coverlet en formato OpenCover:
      # - name: Test with coverage
      #   run: dotnet test --no-build --configuration Release ^
      #     /p:CollectCoverage=true ^
      #     /p:CoverletOutputFormat=opencover ^
      #     /p:CoverletOutput=TestResults/coverage/
      #   shell: pwsh
      #
      # Y añade en "begin":
      #   /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml"

      - name: End Sonar analysis
        shell: pwsh
        run: |
          $scanner = "$env:RUNNER_TEMP\scanner\dotnet-sonarscanner"
          & $scanner end /d:sonar.token="$env:SONAR_TOKEN"
